name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Smoke test - load artifacts and predict
        run: |
          python - << 'PY'
      import pickle, numpy as np, pandas as pd
          FEATURES = [
              "CRIM","ZN","INDUS","CHAS","NOX","RM","AGE","DIS","RAD","TAX","PTRATIO","B","LSTAT"
          ]

          # Load artifacts
          with open('scaling.pkl','rb') as f:
              scaler = pickle.load(f)
          with open('regression.pkl','rb') as f:
              model = pickle.load(f)

          # Basic checks
          assert hasattr(model, 'predict'), 'Loaded model lacks predict()'
      # Adjusted path to dataset inside notebooks/
      df = pd.read_csv('notebooks/boston.csv')
          assert all(feat in df.columns for feat in FEATURES), 'Missing required features in CSV'

          x = df.loc[0, FEATURES].to_numpy(dtype=float).reshape(1, -1)
          x_scaled = scaler.transform(x)
          y_pred = model.predict(x_scaled)
          print('Prediction for first row:', float(y_pred[0]))
          PY

      - name: Import app module
        run: |
          python - << 'PY'
          import importlib
          m = importlib.import_module('app')
          assert hasattr(m, 'app'), 'Flask app object not found'
          print('Flask app name:', m.app.name)
          PY
